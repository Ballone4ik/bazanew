// Bazanew.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы. 
// 

#include <iostream> 

FILE* fp;
FILE* fpn;
struct adress
{
    char city[10];
    char street[10];
    int house;
};

struct person
{
    adress q;
    char name[10];
    char surname[10];
    int phone;
}p = {
"Ivan", "Ivanov", 123 };

//int n = 1; 

void create(person p, FILE* fp, int* size)
{
    fwrite(&p, sizeof(person), 1, fp);
    printf("=====database created!=====\n");
    *size = 0;
}

int chtobolshe(char* s1, char* s2)
{
    int i = 0, j = 0, k = 0;
    while (s1[j] != '\0') j++;
    while (s2[k] != '\0') k++;
    if (j < k) return 1;
    else if (j > k) return 0;
    else if (j == k) {
        while (s1[i] != '\0' || s2[i] != '\0')
        {
            while (s1[i] == s2[i])
            {
                if (s1[i] < s2[i]) return 1;
                else return 0;
            }
            i++;
        }
    }
}

int sravneniestr(char* s1, char* s2)
{
    int i = 0, b = 0;
    while (s1[i] != '\0' || s2[i] != '\0')
    {
        if (s1[i] != s2[i])
        {
            b++;
            break;
        }
        i++;
    }
    if (b == 0) return 1;
    else return 0;
}

void changereg(char* s)
{
    int i = 1;
    if (s[0] > 90) s[0] -= 32;
    while (s[i] != '\0')
    {
        if (s[i] < 90) s[i] += 32;
        i++;
    }
}

void add(FILE* fp, int* size)
{
    person temp;
    scanf_s("%s", temp.name, 10);
    scanf_s("%s", temp.surname, 10);
    scanf_s("%d", &temp.phone);
    scanf_s("%s", temp.q.city, 10);
    scanf_s("%s", temp.q.street, 10);
    scanf_s("%d", &temp.q.house);
    changereg(temp.name);
    changereg(temp.surname);
    changereg(temp.q.city);
    changereg(temp.q.street);
    fseek(fp, sizeof(temp) * (*size), SEEK_SET);
    fwrite(&temp, sizeof(temp), 1, fp);
    *size = *size + 1;
    //fseek(fp, sizeof(temp) * (*nn) + sizeof(int) + 1, SEEK_SET); 
    //fwrite(&temp, sizeof(temp), 1, fpn); 
    //return ++nn; 
}

//n=add(p, n); 

void find_telephone(FILE* fp, int number, int size)
{
    int b = 0;
    person hah;
    fseek(fp, 0, SEEK_SET);
    for (int i = 0; i < size; i++)
    {
        fread(&hah, sizeof(person), 1, fp);
        if (number == hah.phone) printf("%s %s %d %s %s %d %d\n", hah.name, hah.surname, hah.phone, hah.q.city, hah.q.street, hah.q.house, i);
        else b++;
    }
    if (b != 0) printf("not found\n");
}

void find_house(FILE* fp, int hous, int size)
{
    int b = 0;
    person ha;
    fseek(fp, 0, SEEK_SET);
    for (int i = 0; i < size; i++)
    {
        fread(&ha, sizeof(person), 1, fp);
        if (hous == ha.q.house) printf("%s %s %d %s %s %d %d\n", ha.name, ha.surname, ha.phone, ha.q.city, ha.q.street, ha.q.house, i);
        else b++;
    }
    if (b != 0) printf("not found\n");
}

void find_name(FILE* fp, char* name, int size)
{
    int l = 0;
    person temp;
    fseek(fp, 0, SEEK_SET);
    for (int j = 0; j < size; j++)
    {
        fread(&temp, sizeof(person), 1, fp);
        if (sravneniestr(temp.name, name) == 1)
        {
            printf("%s, %s, %d, %s, %s, %d, %d", temp.name, temp.surname, temp.phone, temp.q.city, temp.q.street, temp.q.house, j);
            l++;
        }
    }
    if (l == 0) printf("not found\n");
}

void find_city(FILE* fp, char* city, int size)
{
    int l = 0;
    person temp;
    fseek(fp, 0, SEEK_SET);
    for (int j = 0; j < size; j++)
    {
        fread(&temp, sizeof(person), 1, fp);
        if (sravneniestr(temp.q.city, city) == 1)
        {
            printf("%s, %s, %d, %s, %s, %d, %d \n", temp.name, temp.surname, temp.phone, temp.q.city, temp.q.street, temp.q.house, j);
            l++;
        }
    }
    if (l == 0) printf("not found\n");
}

void find_street(FILE* fp, char* street, int size)
{
    int l = 0;
    person temp;
    fseek(fp, 0, SEEK_SET);
    for (int j = 0; j < size; j++)
    {
        fread(&temp, sizeof(person), 1, fp);
        if (sravneniestr(temp.q.street, street) == 1)
        {
            printf("%s, %s, %d, %s, %s, %d, %d \n", temp.name, temp.surname, temp.phone, temp.q.city, temp.q.street, temp.q.house, j);
            l++;
        }
    }
    if (l == 0) printf("not found\n");
}

void find_surname(FILE* fp, char* surname, int size)
{
    person temp;
    int l = 0;
    fseek(fp, 0, SEEK_SET);
    for (int j = 0; j < size; j++)
    {
        fread(&temp, sizeof(person), 1, fp);
        if (sravneniestr(temp.surname, surname) == 1)
        {
            printf("%s, %s, %d, %s, %s, %d, %d", temp.name, temp.surname, temp.phone, temp.q.city, temp.q.street, temp.q.house, j);
            l++;
        }
    }
    if (l == 0) printf("not found\n");
}

void print(FILE* fp, int* size)
{
    fseek(fp, 0, SEEK_SET);
    person temp;
    for (int i = 0; i < *size; i++)
    {
        fread(&temp, sizeof(person), 1, fp);
        printf("%d) %s", i + 1, temp.name);
        printf(" %s", temp.surname);
        printf(" %d", temp.phone);
        printf(" %s", temp.q.city);
        printf(" %s", temp.q.street);
        printf(" %d\n", temp.q.house);

    }
}

int edit(FILE* fp, int* size)
{
    int position;
    int ch;
    printf("enter editable position\n");
    scanf_s("%d", &position);
    if (position > *size) { printf("user error\n"); return 0; }
    printf("\nto edit name press 1\n ");
    printf("\nto edit surname press 2\n ");
    printf("\nto edit phone press 3\n ");
    printf("\nto edit city press 4\n ");
    printf("\nto edit street press 5\n ");
    printf("\nto edit house press 6\n ");


    scanf_s("%d", &ch);
    fseek(fp, sizeof(person) * (position - 1), SEEK_SET);
    person temp;
    fread(&temp, sizeof(person), 1, fp);
    fseek(fp, -48, SEEK_CUR);
    if (ch == 1) { printf("enter new name\n"); scanf_s("%s", temp.name, 10); }
    if (ch == 2) { printf("enter new surname\n"); scanf_s("%s", temp.surname, 10); }
    if (ch == 3) { printf("enter new phone\n"); scanf_s("%d", &temp.phone); }
    if (ch == 4) { printf("enter new city\n"); scanf_s("%s", temp.q.city, 10); }
    if (ch == 5) { printf("enter new street\n"); scanf_s("%s", temp.q.street, 10); }
    if (ch == 6) { printf("enter new house\n"); scanf_s("%d", &temp.q.house); }
    changereg(temp.name);
    changereg(temp.surname);
    changereg(temp.q.city);
    changereg(temp.q.street);
    fwrite(&temp, sizeof(person), 1, fp);
}

int deleteDB(FILE* fp, int index, int* size)
{
    person temp;
    if (index > *size) {
        printf("user error\n");
        return 0;
    }
    fseek(fp, sizeof(person) * index, SEEK_SET);
    for (int i = 0; i < *size - index; i++) {
        fread(&temp, sizeof(person), 1, fp);
        fseek(fp, -48, SEEK_CUR);
        fwrite(&temp, sizeof(person), 1, fp);
        fseek(fp, sizeof(person), SEEK_CUR);
    }
    *size = *size - 1;
}

void sortDB(FILE* fp, int* size)
{
    person
        temp1, temp2;
    for (int i = 0; i < *size - 1; i++)
        for (int j = 0; j < *size - i - 1; j++)
        {
            fseek(fp, j * sizeof(person), SEEK_SET);
            fread(&temp1, sizeof(person), 1, fp);
            fread(&temp2, sizeof(person), 1, fp);
            if (chtobolshe(temp1.surname, temp2.surname) == 0)
            {
                person temp = temp2;
                temp2 = temp1;
                temp1 = temp;
                fseek(fp, j * sizeof(person), SEEK_SET);
                fwrite(&temp1, sizeof(person), 1, fp);
                fwrite(&temp2, sizeof(person), 1, fp);
            }

        }
}



int main()
{
    int n = 1;
    fopen_s(&fp, "C:\\Users\\JakJa\\OneDrive\\Рабочий стол\\fp.txt", "r+");
    fopen_s(&fpn, "C:\\Users\\JakJa\\OneDrive\\Рабочий стол\\fpn.txt", "r+");

    //fseek(fp, 2*sizeof(p), SEEK_SET); 
    //fwrite(&p, 2*sizeof(p), 1, fp); 


    n++;

    //int actionNum, size = 0; 
    //FILE* f; 
    //FILE* sizeF; 
    //fopen_s(&f, "DB.txt", "r+"); 
    //fopen_s(&sizeF, "size.txt", "r+"); 

    fscanf_s(fpn, "%d", &n);
    //n = fprintf_s(fpn, "%d", n); 
    int ch;
    do
    {
        printf("1 create DB\n");
        printf("2 add record \n");
        printf("3 find\n");
        printf("4 print\n");
        printf("5 edit\n");
        printf("6 delete\n");
        printf("7 sort\n");
        printf("8 exit\n");

        scanf_s("%d", &ch);

        if (ch == 1) create(p, fp, &n);
        if (ch == 2) {
            printf("enter name, surname, phone number, city, street, house\n");
            add(fp, &n);
        }
        if (ch == 3)
        {
            int k;
            printf("press 1 to find by name or 2 to find by phone or 0 to find by surname or 4 to find by city or 5 to find by street or 6 to find by house\n");
            scanf_s("%d", &k);
            if (k == 1) {
                char name[10];
                printf("\nenter name\n");
                scanf_s("%s", name, 10);
                changereg(name);
                find_name(fp, name, n);
            }
            if (k == 2)
            {
                int phone;
                printf("enter phone\n");
                scanf_s("%d", &phone);
                find_telephone(fp, phone, n);
            }
            if (k == 6)
            {
                int house;
                printf("enter house\n");
                scanf_s("%d", &house);
                find_house(fp, house, n);
            }
            if (k == 0)
            {
                char surname[10];
                printf("\nenter surname\n");
                scanf_s("%s", surname, 10);
                changereg(surname);
                find_surname(fp, surname, n);
            }
            if (k == 4)
            {
                char city[10];
                printf("\nenter city\n");
                scanf_s("%s", city, 10);
                changereg(city);
                find_city(fp, city, n);
            }
            if (k == 5) {
                char street[10];
                printf("\nenter street\n");
                scanf_s("%s", street, 10);
                changereg(street);
                find_street(fp, street, n);
            }
        }
        if (ch == 4) print(fp, &n);
        if (ch == 5) edit(fp, &n);
        if (ch == 6) {
            int position;
            printf("enter position\n");
            scanf_s("%d", &position);
            deleteDB(fp, position, &n);
        }
        if (ch == 7) sortDB(fp, &n);
        fseek(fpn, 0, SEEK_SET);
        fprintf(fpn, "%d", n);
    } while (ch != 8);



    fclose(fp);
    fclose(fpn);
}
